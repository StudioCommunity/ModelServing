
trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.6'

- bash: echo "##vso[task.prependpath]$CONDA/bin"
  displayName: Add conda to PATH

- script: |
    cd src/azureml-designer-model
    python -m pip install --upgrade pip
    pip install -r requirements.txt
    echo "pip freeze"
    pip freeze
  displayName: 'Install azureml-designer-model dependencies'

- script: |
    cd src/azureml-designer-model
    python -m pytest -s
  displayName: 'PyTest azure-designer-model'

- bash: conda create --yes --quiet --name loader_env python=3.6.8
  displayName: Create Anaconda environment for azureml-designer-score test

- bash: |
    source activate loader_env
    cd src/azureml-designer-model
    python setup.py install
  displayName: 'Install azureml-designer-model'

- script: |
    cd scripts
    python refresh_score_tests.py
  displayName: 'Create score test cases from model test output'

- bash: |
    source activate loader_env
    cd src/azureml-designer-score
    python -m pip install --upgrade pip
    pip install keyring --pre
    pip install artifacts-keyring --pre
    pip install -r requirements.txt --extra-index-url=https://msdata.pkgs.visualstudio.com/_packaging/azureml-modules%40Local/pypi/simple/
    echo "pip freeze"
    pip freeze
  displayName: 'Install azureml-designer-score dependencies'

- bash: |
    source activate loader_env
    conda env export
  displayName: 'Show conda environment'

- bash: |
    source activate loader_env
    cd src/azureml-designer-score 
    python -m pytest -s --ignore='azureml/designer/score/score/tests/custom'
  displayName: 'PyTest azure-designer-score'

# Save build number to file
- script: |
    echo $(Build.BuildNumber)
    echo $(Build.BuildNumber) > src/build.version
  displayName: Save build number to file

# Install python distributions like wheel, twine etc
- script: |
    pip install wheel
    pip install twine
  displayName: Install wheel and twine

- script: |
    cd src/azureml-designer-model
    python setup.py bdist_wheel
  displayName: 'Create model whl file'

- script: |
    cd src/azureml-designer-score
    python setup.py bdist_wheel
  displayName: 'Create score whl file'

- task: TwineAuthenticate@0
  displayName: 'Authenticate Azure Artifacts with twine'
  inputs:
    artifactFeeds: 'CustomModules,azureml-modules'

# Use command line script to 'twine upload', use -r to pass the repository name and --config-file to pass the environment variable set by the authenticate task.
- script: |
    python -m twine upload -r "CustomModules" --config-file $(PYPIRC_PATH) src/azureml-designer-model/dist/*.whl
    python -m twine upload -r "CustomModules" --config-file $(PYPIRC_PATH) src/azureml-designer-score/dist/*.whl
  displayName: 'Upload twine'

- script: |
    python -m twine upload -r "azureml-modules" --config-file $(PYPIRC_PATH) src/azureml-designer-model/dist/*.whl
    python -m twine upload -r "azureml-modules" --config-file $(PYPIRC_PATH) src/azureml-designer-score/dist/*.whl
  displayName: 'Upload twine to azureml-modules'

- script: |
    git push https://$(GitHubUserName):$(GitHubPassword)@github.com/$(GitHubUserName)/$(GitHubRepo).git 'refs/remotes/origin/*:refs/heads/*' -f
  displayName: 'Push to GitHub'
